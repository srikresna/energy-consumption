# -*- coding: utf-8 -*-
"""proyek_timeseries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YeTQS8aXMLncBREFdHJQ7sbGIY28WtZ0

1. Nama : Sri Kresna Maha Dewa
2. Asal Instansi : Politeknik Negeri Malang
3. Email : srikresna383@gmail.com
"""

!pip install -q kaggle

from google.colab import files

files.upload()

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d robikscube/hourly-energy-consumption

!unzip hourly-energy-consumption.zip

import pandas as pd

df = pd.read_csv('EKPC_hourly.csv')
df

df.isnull().sum()

df['date']=pd.to_datetime(df['Datetime'])
df.head()

df.dtypes

new_df = df.drop('Datetime', axis = 1)
new_df.set_index('date', inplace = True)
new_df

new_df.dtypes

import matplotlib.pyplot as plt

plt.figure(figsize = (15, 5))
plt.plot(new_df)
plt.show()

date = df['date'].values
energy = new_df['EKPC_MW'].values

print(date.shape)
print(energy.shape)

x = date.reshape(-1, 1)
y = energy.reshape(-1, 1)
print(x)
print(y)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(x, y)
date = scaler.transform(x)
energy = scaler.transform(y)

dt = date.flatten()
en = energy.flatten()

from sklearn.model_selection import train_test_split

date_train, date_test, energy_train, energy_test = train_test_split(dt, en, test_size = 0.2, shuffle = False)

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift = 1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    
    return ds.batch(batch_size).prefetch(1)

print(len(energy_train), len(energy_test))

x_energy_train = windowed_dataset(energy_train, window_size=60, batch_size=100, shuffle_buffer=5000)
x_energy_test = windowed_dataset(energy_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters = 32, kernel_size = 5, strides = 1, padding = "causal", activation="relu", input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences = True),
  tf.keras.layers.LSTM(64, return_sequences = True),
  tf.keras.layers.Dense(64, activation="relu"),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-8 * 10**(epoch / 20))

optimizer = tf.keras.optimizers.SGD(learning_rate=1e-8, #learning rate
                                    momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

threshold_mae = (new_df['EKPC_MW'].max() - new_df['EKPC_MW'].min()) * 10/100
print(threshold_mae)

# callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < threshold_mae) and (logs.get('val_mae') < threshold_mae):
      self.model.stop_training = True
      print("\nMAE < 10% dari skala data")
callbacks = myCallback()


#train
tf.keras.backend.set_floatx('float64')
history = model.fit(x_energy_train,
                    validation_data = x_energy_test,
                    epochs=100,
                    callbacks = [callbacks]
                    )
